  version: '3.9' # Docker Compose 버전 (필요에 따라 변경 가능)

services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql-server2
    environment:
      SA_PASSWORD: ${MSSQL_DATABASE_PASS}
      ACCEPT_EULA: Y
    ports:
      - '${MSSQL_DATABASE_PORT}:1433'
    networks:
      - overlay
    volumes:
      - mssql-data:/var/opt/mssql
    restart: always


  postgres:
    image: postgres:latest
    container_name: my_postgres2
    ports:
      - '${DATABASE_PORT}:5432'
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
      TZ: 'Asia/Seoul' # 환경 변수 TZ에 시간대 설정 추가
    networks:
      - overlay
    volumes:
      - pgdata:/var/lib/postgresql/data # 데이터 볼륨 설정
    restart: always

  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto2
    ports:
      - '1883:1883'
    command: mosquitto -c /mosquitto-no-auth.conf
    networks:
      - overlay
    restart: always

  redis:
    image: redis:latest
    container_name: my_redis2
    ports:
      - '6379:6379'
    networks:
      - overlay
    restart: always

#  back: # 일반 서버
#    container_name: main-server2
#    build:
#      context: .
#      dockerfile: Dockerfile
#    environment:
#      NODE_ENV: ${NODE_ENV}
#      SCHEDULE: 'false'
#      DATABASE_HOST: ${DATABASE_HOST} # Use host.docker.internal to refer to the host machine's IP
#      DATABASE_PORT: ${DATABASE_PORT}
#      DATABASE_USER: ${DATABASE_USER}
#      DATABASE_PASS: ${DATABASE_PASS}
#      DATABASE_NAME: ${DATABASE_NAME}
#      REDIS_HOST: host.docker.internal
#      REDIS_PORT: ${REDIS_PORT}
#      MQTT_HOST: ${MQTT_HOST}
#      MQTT_PORT: ${MQTT_PORT}
#      MSSQL_DATABASE_USER: ${MSSQL_DATABASE_USER}
#      MSSQL_DATABASE_PASS: ${MSSQL_DATABASE_PASS}
#      MSSQL_DATABASE_HOST: ${MSSQL_DATABASE_HOST}
#      MSSQL_DATABASE_NAME: ${MSSQL_DATABASE_NAME}
#      MSSQL_DATABASE_PORT: ${MSSQL_DATABASE_PORT}
#      NAS_PATH: ${NAS_PATH}
#      LOCAL_UPLOAD_PATH: ${LOCAL_UPLOAD_PATH}
#      TZ: 'Asia/Seoul'
#    ports:
#      - '${PORT}:3000'
#    volumes:
#      - logs-volume:/var/app/logs
##      - volume_name_1:/var/nas
#      - volume_name_2:/var/app/src/upload
##      -  //LAPTOP-G537CIUA/nas:/mnt/share
#      -  //LAPTOP-G537CIUA/nas:/var/nas
#    networks:
#      - overlay
#    links:
#      - postgres:postgres
#      - mqtt:mqtt
#      - redis:redis
#      - mssql:mssql

  back-schedule: # 스케줄 서버
    container_name: schedule-server
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      SCHEDULE: 'true'
      DATABASE_HOST: ${DATABASE_HOST} # Use host.docker.internal to refer to the host machine's IP
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
      DATABASE_NAME: ${DATABASE_NAME}
      REDIS_HOST: host.docker.internal
      REDIS_PORT: ${REDIS_PORT}
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      MSSQL_DATABASE_USER: ${MSSQL_DATABASE_USER}
      MSSQL_DATABASE_PASS: ${MSSQL_DATABASE_PASS}
      MSSQL_DATABASE_HOST: ${MSSQL_DATABASE_HOST}
      MSSQL_DATABASE_NAME: ${MSSQL_DATABASE_NAME}
      MSSQL_DATABASE_PORT: ${MSSQL_DATABASE_PORT}
      NAS_PATH: ${NAS_PATH}
      LOCAL_UPLOAD_PATH: ${LOCAL_UPLOAD_PATH}
      TZ: 'Asia/Seoul'
    ports:
      - '3001:3000'
    volumes:
      - logs-volume:/var/app/logs
    networks:
      - overlay
    links:
      - postgres:postgres
      - mqtt:mqtt
      - redis:redis
      - mssql:mssql

networks:
  overlay:

volumes:
  pgdata:
  mssql-data:
  logs-volume:
  volume_name_1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Z:\
  volume_name_2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOCAL_UPLOAD_PATH}
